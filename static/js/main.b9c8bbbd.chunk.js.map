{"version":3,"sources":["components/Indecision.jsx","components/AddTodo.js","components/ListGroup.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Indecision","_ref","todos","_useState","useState","_useState2","Object","slicedToArray","decision","setDecision","_useState3","_useState4","color","setColor","react_default","a","createElement","className","style","padding","length","onClick","randomIndex","Math","floor","random","text","decide","colors","randomColorIndex","concat","textTransform","AddTodo","getTodo","id","todo","setTodo","onSubmit","e","preventDefault","createdTodo","uniqid","alert","type","autoFocus","value","onChange","target","ListGroup","deleteTodo","list","map","key","cursor","Home","components_AddTodo","components_ListGroup","App","setTodos","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","newTodo","toConsumableArray","modifiedTodos","filter","react_router_dom","to","react_router","path","exact","render","components_Home","components_Indecision","position","bottom","left","right","Date","getUTCFullYear","Boolean","window","location","hostname","match","ReactDOM","basename","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9c8bbbd.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nconst Indecision = ({todos}) => {\r\n    const [decision,setDecision] = useState('');\r\n    const [color,setColor] = useState('');\r\n    const decide = () =>{\r\n        if(todos.length){\r\n            const randomIndex = Math.floor(Math.random() * todos.length);\r\n            return  todos[randomIndex].text;\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"center teal white-text\" style={{padding:\"2rem 0\"}}>Indecision</h2>\r\n            <p className=\"center teal-text text-darken-3 flow-text\">\r\n                Let the computer decide your next task...\r\n            </p>\r\n            <div className=\"container\">\r\n                {todos.length ? <h3>{todos.length} tasks left</h3> : <h3>No tasks left.. Phew!</h3>}\r\n\r\n                <button className=\"btn pulse center\" \r\n                    onClick={()=>{\r\n                        setDecision(decide());\r\n                        const colors = ['teal','green','red','orange'];\r\n                        const randomColorIndex = Math.floor(Math.random()*colors.length);\r\n                        setColor(colors[randomColorIndex])\r\n                    }}\r\n                >\r\n                    Decide</button>\r\n                <div>\r\n                    {decision ? \r\n                        <h3 className=\"center-align\">\r\n                            Your next task is &darr; \r\n                            <div className={`${color}-text`}\r\n                                style={{textTransform: \"capitalize\"}}>\r\n                                {decision}\r\n                            </div>\r\n                        </h3> : <span></span>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Indecision\r\n","import React, { useState } from 'react'\r\nimport uniqid from 'uniqid';\r\n\r\n\r\nconst AddTodo = ({ getTodo }) => {\r\n    const [todo, setTodo] = useState({ id: null, text: '' });\r\n\r\n    const handleInput = e => {\r\n        e.preventDefault();\r\n\r\n        if (todo.text) {\r\n            const createdTodo = {\r\n                id: uniqid(),\r\n                text: todo.text\r\n            }\r\n            getTodo(createdTodo);\r\n            setTodo({text:''})\r\n        } else {\r\n            alert('Invalid input. Please re-enter task');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return ( \r\n        <div className = \"input-field col s6\" >\r\n        <form onSubmit = { handleInput } >\r\n        <input type = \"text\"\r\n            className = \"validate\"\r\n            autoFocus value = { todo.text }\r\n            onChange = {(e) => setTodo({ text: e.target.value }) }\r\n        /> \r\n        <button className = \"btn waves-effect waves-light\" type = \"submit\" > \r\n            Add New Task \r\n        </button> \r\n        </form> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AddTodo;","import React from 'react'\r\n\r\nconst ListGroup = ({todos, deleteTodo}) => {\r\n\r\n    \r\n    const list = todos.map( todo =>{\r\n        return (\r\n            <li className=\"collection-item green-text text-darken-2\" \r\n                key={todo.id}\r\n                style={{textTransform: \"capitalize\", cursor:\"default\"}} \r\n                >\r\n                    {todo.text}  \r\n                <i className=\"material-icons right red-text text-darken-4\"\r\n                   key={todo.id}\r\n                   style={{cursor:\"pointer\"}}\r\n                   onClick = {() => deleteTodo(todo.id)}\r\n                >\r\n                    delete\r\n                </i>\r\n            </li>\r\n        )\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h4>\r\n                {todos.length ? <span className=\"left-align\">Tasks left : {todos.length}</span>\r\n                 : <span className=\"center-align\">No tasks left!</span> \r\n            }\r\n            </h4>\r\n            <ul className=\"collection\">\r\n                {list}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListGroup\r\n\r\n","import React from 'react'\r\nimport AddTodo from './AddTodo';\r\nimport ListGroup from './ListGroup';\r\n\r\nconst Home = ({todos,deleteTodo,getTodo}) => {\r\n    return (\r\n        <div>\r\n          <h2 className=\"teal lighten-1 white-text center-align\"style={{padding: \"2rem 0\"}}>\r\n            Task Manager Lite\r\n          </h2>\r\n          <div className=\"container\">\r\n                <AddTodo getTodo={getTodo} />\r\n                <ListGroup todos = {todos} deleteTodo = {deleteTodo}/>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect } from 'react'\nimport {Link, Route} from 'react-router-dom';\n\nimport Indecision from './components/Indecision';\nimport Home from './components/Home';\n\nconst  App = () => {\n  \n  const [todos, setTodos] = useState([]);\n  \n  useEffect(()=>{\n    const todos = localStorage.getItem('todos');\n    if(todos){\n      setTodos(JSON.parse(todos));\n      return\n    }\n  },[]);\n\n  useEffect(()=>{\n    localStorage.setItem('todos', JSON.stringify(todos));\n  })\n\n  // To retrieve todos from the addtodo component\n  const getTodo = (newTodo) => {\n    setTodos([...todos, newTodo]);\n  }\n  // delete todos \n  const deleteTodo = (id) =>{\n    const modifiedTodos = todos.filter(todo =>{\n      return todo.id !== id;\n    });\n\n    setTodos([...modifiedTodos]);\n  }\n\n  return (\n      <div>\n        <nav className=\"nav-wrapper teal darken-2\">\n           <ul className=\"right \">\n              <li><Link to=\"/\" className=\"active\">Home</Link></li>\n              <li><Link to=\"/decide\" className=\"center\">Indecision</Link></li>\n          </ul>\n        </nav>\n        <div>\n            <Route path='/' exact render={()=> (<Home todos={todos} deleteTodo={deleteTodo} getTodo={getTodo} />)} />\n            <Route path='/:anything' exact render={()=>(<Indecision todos={todos}/>)}/>\n            \n        </div>\n\n        <footer className=\"teal darken-2 white-text center\" style={{position:\"fixed\", bottom:\"0\",left:\"0\",right:\"0\",padding:\"1rem 0\"}}>\n          <span className=\"center\"> Created by Sounak {new Date().getUTCFullYear()}</span>\n        </footer>\n      </div>\n    )\n  }\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\n\r\nReactDOM.render( <Router basename='/'> <App/> </Router>, document.getElementById('root'));\r\n\r\n        // If you want your app to work offline and load faster, you can change\r\n        // unregister() to register() below. Note this comes with some pitfalls.\r\n        // Learn more about service workers: https://bit.ly/CRA-PWA\r\n        serviceWorker.unregister();"],"sourceRoot":""}